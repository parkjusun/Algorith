import java.util.Arrays;class FordFulkerson {    private final int     vertices;    private final int[][] capacity;    public FordFulkerson(int vertices) {        this.vertices = vertices;        capacity = new int[vertices][vertices];    }    public void addEdge(int from, int to, int cap) {        capacity[from][to] = cap;    }    // DFS를 사용하여 경로를 찾는 포드-풀커슨 알고리즘    private boolean dfs(int source, int sink, int[] parent, boolean[] visited) {        visited[source] = true;        if (source == sink) {            return true;        }        for (int v = 0; v < vertices; v++) {            if (!visited[v] && capacity[source][v] > 0) {                parent[v] = source;                if (dfs(v, sink, parent, visited)) {                    return true;                }            }        }        return false;    }    public int fordFulkerson(int source, int sink) {        int maxFlow = 0;        int[] parent = new int[vertices];        boolean[] visited = new boolean[vertices];        while (dfs(source, sink, parent, visited)) {            Arrays.fill(visited, false);            int pathFlow = Integer.MAX_VALUE;            for (int v = sink; v != source; v = parent[v]) {                int u = parent[v];                pathFlow = Math.min(pathFlow, capacity[u][v]);            }            for (int v = sink; v != source; v = parent[v]) {                int u = parent[v];                capacity[u][v] -= pathFlow;                capacity[v][u] += pathFlow;            }            maxFlow += pathFlow;        }        return maxFlow;    }    public static void main(String[] args) {        int vertices = 6; // S, A, B, C, D, T 총 6개의 정점        // 포드-풀커슨 알고리즘 사용        FordFulkerson fordFulkersonGraph = new FordFulkerson(vertices);        fordFulkersonGraph.addEdge(0, 1, 16); // S -> A        fordFulkersonGraph.addEdge(0, 3, 13); // S -> C        fordFulkersonGraph.addEdge(1, 2, 12); // A -> B        fordFulkersonGraph.addEdge(2, 5, 20); // B -> T        fordFulkersonGraph.addEdge(3, 1, 4);  // C -> A        fordFulkersonGraph.addEdge(3, 4, 14); // C -> D        fordFulkersonGraph.addEdge(4, 2, 7);  // D -> B        fordFulkersonGraph.addEdge(4, 5, 4);  // D -> T        int source = 0; // S        int sink = 5;   // T        System.out.println("포드-풀커슨 최대 유량은 " + fordFulkersonGraph.fordFulkerson(source, sink) + "입니다.");    }}