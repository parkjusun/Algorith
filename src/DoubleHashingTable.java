import java.util.Arrays;public class DoubleHashingTable {    private final Integer[] hashTable;    private final int       tableSize;    public DoubleHashingTable(int size) {        tableSize = size;        hashTable = new Integer[tableSize];        Arrays.fill(hashTable, null);  // 해시 테이블의 모든 값을 null로 초기화    }    // 첫 번째 해시 함수: h1(k) = k mod 13    private int hash1(int key) {        return key % tableSize;    }    // 두 번째 해시 함수: h2(k) = 1 + (k mod 11)    private int hash2(int key) {        return 1 + (key % 11);    }    // 해시 테이블에 키를 삽입하는 메서드    public void insert(int key) {        int index = hash1(key);  // 첫 번째 해시 함수로 인덱스 계산        int stepSize = hash2(key);  // 두 번째 해시 함수로 충돌 시 이동 크기 계산        // 충돌 해결: 비어 있는 슬롯을 찾을 때까지 이중 해싱 사용        while (hashTable[index] != null) {            index = (index + stepSize) % tableSize;        }        // 비어 있는 슬롯에 키를 삽입        hashTable[index] = key;    }    // 해시 테이블을 출력하는 메서드    public void displayHashTable() {        System.out.println("Index\tValue");        for (int i = 0; i < tableSize; i++) {            if (hashTable[i] == null) {                System.out.println(i + "\t" + "none");            } else {                System.out.println(i + "\t" + hashTable[i]);            }        }    }    public static void main(String[] args) {        int[] keys = { 18, 41, 22, 44, 59, 32, 31, 73, 90, 34 };  // 삽입할 키 배열        int tableSize = 13;        DoubleHashingTable hashTable = new DoubleHashingTable(tableSize);        // 키들을 해시 테이블에 삽입        for (int key : keys) {            hashTable.insert(key);        }        // 해시 테이블 상태 출력        hashTable.displayHashTable();    }}