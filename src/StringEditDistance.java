public class StringEditDistance {    public static int minEditDistance(String A, String B) {        int m = A.length();        int n = B.length();        // DP 배열 초기화        int[][] dp = new int[m + 1][n + 1];        // DP 배열 채우기        for (int i = 0; i <= m; i++) {            for (int j = 0; j <= n; j++) {                // 첫 번째 문자열이 비어있는 경우, j개의 삽입 필요                if (i == 0) {                    dp[i][j] = j;                }                // 두 번째 문자열이 비어있는 경우, i개의 삭제 필요                else if (j == 0) {                    dp[i][j] = i;                }                // 문자가 같다면 편집 비용 없음                else if (A.charAt(i - 1) == B.charAt(j - 1)) {                    dp[i][j] = dp[i - 1][j - 1];                }                // 문자가 다를 경우 삽입, 삭제, 교체 중 최소 비용 선택                else {                    int insertCost = j + 1; // 삽입 비용                    int deleteCost = m - i; // 삭제 비용                    int replaceCost = Math.abs(A.charAt(i - 1) - B.charAt(j - 1)); // 교체 비용                    dp[i][j] = Math.min(dp[i - 1][j] + deleteCost, // 삭제                            Math.min(dp[i][j - 1] + insertCost, // 삽입                                    dp[i - 1][j - 1] + replaceCost)); // 교체                }            }        }        // 최종 최소 편집 거리 반환        return dp[m][n];    }    public static void main(String[] args) {        String A = "premium";        String B = "office";        int result = minEditDistance(A, B);        System.out.println("최소 편집 거리: " + result);    }}